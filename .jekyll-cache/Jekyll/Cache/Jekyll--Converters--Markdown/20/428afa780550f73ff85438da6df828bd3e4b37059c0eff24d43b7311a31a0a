I"Ge<p>Today I do not have a lot of time left for today. Instead of spending time grinding leetcode for the interviews, I wanted to study swift package manager (SPM). I am wanting to explore Swift and Java as my main [scripting/everything] language(s) moving forward. I’ve never tried SPM before and I’ve been using Swift for almost a year now (come November). So, I figured I should give it a shot and I even had an idea to implement.</p>

<h2 id="problem-statement">Problem Statement</h2>

<p>Every time I write this piece of content, I have to name this file. I have a specific way I name these files: It goes <code class="highlighter-rouge">date-title.markdown</code> so it is easier for me to reference in the future. When the parser does its magic, it also creates a nice, seo friendly URL that I can share. It gives some context to readers that are reading it right now in October 2018. If you look at the link, you know that it is a fresh article without even reading it ;-) People like me like to read things like this. While it is fine to do it manually once in a while, it became too repetative to me. SPM to the rescue!</p>

<h2 id="idea">Idea</h2>

<p>Make a cli tool using SPM that can:</p>

<ul>
  <li>take input from cli</li>
  <li>input like : <code class="highlighter-rouge">$ tool "Swift package manager october 2018"</code></li>
  <li>and provide output to me so I can copy/paste while I am creating a new file</li>
</ul>

<p>… oh and I get to write something today ;-)</p>

<h2 id="solution">Solution</h2>

<p>Here is my code:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.swift</span>
<span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">private</span> <span class="k">let</span> <span class="nv">arguments</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="kt">CommandLine</span><span class="o">.</span><span class="n">arguments</span>
<span class="c1">//</span>
<span class="k">guard</span> <span class="n">arguments</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="o">!</span><span class="n">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">isEmpty</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Need some kind of arguments fam"</span><span class="p">)</span>
    <span class="nf">exit</span><span class="p">(</span><span class="kt">EXIT_FAILURE</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//let input = "Will end-user applications ever be truly programmable?"</span>
<span class="k">let</span> <span class="nv">input</span> <span class="o">=</span> <span class="n">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="k">let</span> <span class="nv">inputLowerCased</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="nf">lowercased</span><span class="p">()</span>

<span class="c1">//print(input)</span>

<span class="kd">func</span> <span class="nf">dashifyText</span><span class="p">(</span><span class="n">_</span> <span class="nv">inputTxt</span><span class="p">:</span><span class="kt">String</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">input</span> <span class="o">=</span> <span class="n">inputTxt</span><span class="p">,</span> <span class="o">!</span><span class="n">input</span><span class="o">.</span><span class="n">isEmpty</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">""</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nv">result</span> <span class="o">=</span> <span class="s">""</span>

    <span class="k">for</span> <span class="n">character</span> <span class="k">in</span> <span class="n">input</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">character</span> <span class="o">==</span> <span class="s">" "</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="s">"-"</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">character</span> <span class="o">==</span> <span class="s">"?"</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="s">""</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="kt">String</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">result</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">currDateTime</span> <span class="o">=</span> <span class="kt">Date</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">dateFormatter</span> <span class="o">=</span> <span class="kt">DateFormatter</span><span class="p">()</span>

<span class="c1">// For example, short would have the basics: "10/8/16, 10:52 PM"</span>
<span class="n">dateFormatter</span><span class="o">.</span><span class="n">timeStyle</span> <span class="o">=</span> <span class="o">.</span><span class="n">short</span>
<span class="n">dateFormatter</span><span class="o">.</span><span class="n">dateStyle</span> <span class="o">=</span> <span class="o">.</span><span class="n">short</span>

<span class="k">let</span> <span class="nv">currDateTimeText</span> <span class="o">=</span> <span class="n">dateFormatter</span><span class="o">.</span><span class="nf">string</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">currDateTime</span><span class="p">)</span>

<span class="kd">func</span> <span class="nf">dashifyDateTimeString</span><span class="p">(</span><span class="n">_</span> <span class="nv">forString</span><span class="p">:</span><span class="kt">String</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">dateTimeString</span> <span class="o">=</span> <span class="n">forString</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">""</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">resultant</span> <span class="o">=</span> <span class="s">""</span>

    <span class="k">for</span> <span class="n">char</span> <span class="k">in</span> <span class="n">dateTimeString</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="n">char</span> <span class="p">{</span>
        <span class="k">case</span> <span class="s">"/"</span><span class="p">:</span>
            <span class="n">resultant</span> <span class="o">=</span> <span class="n">resultant</span> <span class="o">+</span> <span class="s">"-"</span>
        <span class="k">case</span> <span class="s">","</span><span class="p">:</span>
            <span class="n">resultant</span> <span class="o">=</span> <span class="n">resultant</span> <span class="o">+</span> <span class="s">""</span>
        <span class="k">case</span> <span class="s">":"</span><span class="p">:</span>
            <span class="n">resultant</span> <span class="o">=</span> <span class="n">resultant</span> <span class="o">+</span> <span class="s">"-"</span>
        <span class="k">case</span> <span class="s">" "</span><span class="p">:</span>
            <span class="n">resultant</span> <span class="o">=</span> <span class="n">resultant</span> <span class="o">+</span> <span class="s">"-"</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="n">resultant</span> <span class="o">=</span> <span class="n">resultant</span> <span class="o">+</span> <span class="kt">String</span><span class="p">(</span><span class="n">char</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">resultant</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">dashifiedText</span> <span class="o">=</span> <span class="nf">dashifyText</span><span class="p">(</span><span class="n">inputLowerCased</span><span class="p">)</span>
<span class="k">let</span> <span class="nv">dateTimeText</span> <span class="o">=</span> <span class="nf">dashifyDateTimeString</span><span class="p">(</span><span class="n">currDateTimeText</span><span class="p">)</span>

<span class="k">let</span> <span class="nv">finalString</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">dateTimeText</span><span class="se">)</span><span class="s">-</span><span class="se">\(</span><span class="n">dashifiedText</span><span class="se">)</span><span class="s">.markdown"</span>

<span class="nf">print</span><span class="p">(</span><span class="n">finalString</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"LENGTH: </span><span class="se">\(</span><span class="n">finalString</span><span class="o">.</span><span class="n">count</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>and in the process, I’ve tried different things. The struggles were real.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">throw</span> <span class="kt">NSError</span><span class="p">(</span><span class="nv">domain</span><span class="p">:</span> <span class="s">"my error description"</span><span class="p">,</span> <span class="nv">code</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="nv">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="s">"ui1"</span><span class="p">:</span><span class="mi">12</span><span class="p">,</span> <span class="s">"ui2"</span><span class="p">:</span><span class="s">"val2"</span><span class="p">]</span> <span class="p">)</span>
        <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">stringSet</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">subString</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="o">.</span><span class="kt">SubSequence</span> <span class="k">in</span>
            <span class="k">let</span> <span class="nv">_moddedSubString</span> <span class="o">=</span> <span class="n">subString</span>
            <span class="k">return</span> <span class="n">subString</span>
        <span class="p">}</span>
        <span class="k">let</span> <span class="nv">filteredStr</span> <span class="o">=</span> <span class="n">dateTimeString</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span>
            <span class="k">switch</span> <span class="n">element</span> <span class="p">{</span>
            <span class="k">case</span> <span class="s">"/"</span><span class="p">:</span>
                <span class="k">return</span> <span class="kt">Character</span><span class="p">(</span><span class="s">"-"</span><span class="p">)</span>
            <span class="k">case</span> <span class="s">","</span><span class="p">:</span>
                <span class="k">return</span> <span class="kt">Character</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
            <span class="k">case</span> <span class="s">":"</span><span class="p">:</span>
                <span class="k">return</span> <span class="kt">Character</span><span class="p">(</span><span class="s">"-"</span><span class="p">)</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">element</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">var</span> <span class="nv">result</span> <span class="o">=</span> <span class="s">""</span>

        <span class="k">for</span> <span class="n">character</span> <span class="k">in</span> <span class="n">filteredStr</span> <span class="p">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="s">"</span><span class="se">\r</span><span class="s">esult"</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="nv">splitStr</span> <span class="o">=</span> <span class="n">dateTimeString</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">)</span>

        <span class="k">let</span> <span class="nv">filteredStr</span> <span class="o">=</span> <span class="n">splitStr</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="n">element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span>
            <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="nv">filteredStr</span> <span class="o">=</span> <span class="n">splitStr</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="p">(</span><span class="n">element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="k">in</span>
            <span class="k">switch</span> <span class="n">element</span> <span class="p">{</span>
            <span class="k">case</span> <span class="s">"/"</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">false</span>
            <span class="k">case</span> <span class="s">","</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">false</span>
            <span class="k">case</span> <span class="s">":"</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">false</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="k">return</span> <span class="kc">true</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="s">""</span>
</code></pre></div></div>

<p>Oh and if you actually ran this script then you may notice that it doesn’t exactly create the same URL that you currently see. I had to remove the time from the file name. My actual naming convention is to use days for the files and within the files I have a <code class="highlighter-rouge">datePublished</code> and a <code class="highlighter-rouge">dateModified</code> timestamps.</p>

<p>If you ran this script it would make something like this as output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// current output
2018-10-04-23-39-swift-package-manager-october-2018.markdown
// what we need
2018-10-04-swift-package-manager-october-2018.markdown
</code></pre></div></div>

<p>It is almost there. I will modify it for me and I will leave this up to you if you care as an exercise.</p>

<p>I’m trying something different here today with you. I am a bit more raw and transparent. I usually wouldn’t have posted the code above. I definitely would have edited it before publishing it. But that is not the point of this exercise.</p>

<p>What I am attempting to do here is two things at once:</p>

<ol>
  <li>going off on a random idea and implementing it just because — a challenge;</li>
  <li>playing with Swift and seeing where that takes me;</li>
</ol>

<p>And to finish off, I will list the links that I have open for today in no particular order:</p>

<ul>
  <li><a href="https://en.wikipedia.org/wiki/Automated_readability_index">https://en.wikipedia.org/wiki/Automated_readability_index</a> -&gt; <code class="highlighter-rouge">4.71 * (Characters/String) + 0.5 * (String/[String]) - 21.43</code></li>
  <li><a href="https://www.ralfebert.de/ios-examples/uikit/uicatalog-playground/UIButton/">https://www.ralfebert.de/ios-examples/uikit/uicatalog-playground/UIButton/</a> -&gt; learning to prototype in Playgrounds</li>
  <li><a href="https://github.com/squimer/DatePickerDialog-iOS-Swift/pull/86/files">https://github.com/squimer/DatePickerDialog-iOS-Swift/pull/86/files</a> -&gt; have issues in recent update to 12.1 of <a href="https://dailyvibes.ca">dailyvibes</a></li>
  <li><a href="https://github.com/squimer/DatePickerDialog-iOS-Swift/blob/f7b0e569f5f29d82837905dfb174b0e04c7b681d/Sources/DatePickerDialog.swift">https://github.com/squimer/DatePickerDialog-iOS-Swift/blob/f7b0e569f5f29d82837905dfb174b0e04c7b681d/Sources/DatePickerDialog.swift</a></li>
  <li><a href="https://iosdevcenters.blogspot.com/2017/05/uipickerview-example-with-uitoolbar-in.html">https://iosdevcenters.blogspot.com/2017/05/uipickerview-example-with-uitoolbar-in.html</a></li>
  <li><a href="https://developer.apple.com/documentation/uikit/uidatepicker">https://developer.apple.com/documentation/uikit/uidatepicker</a></li>
  <li><a href="https://stackoverflow.com/questions/41361177/sizing-a-uipickerview-inside-a-uialertview">https://stackoverflow.com/questions/41361177/sizing-a-uipickerview-inside-a-uialertview</a></li>
  <li><a href="[http://www.streamingmedia.com/Articles/Editorial/Featured-Articles/RTMP-in-the-Age-of-HTTP-Video-Streaming-Dont-Count-it-Out-100">http://www.streamingmedia.com/Articles/Editorial/Featured-Articles/RTMP-in-the-Age-of-HTTP-Video-Streaming-Dont-Count-it-Out-100</a></li>
  <li><a href="http://www.streamingmedia.com/Articles/Editorial/Featured-Articles/RTMP-in-the-Age-of-HTTP-Video-Streaming-Dont-Count-it-Out-100909.aspx">http://www.streamingmedia.com/Articles/Editorial/Featured-Articles/RTMP-in-the-Age-of-HTTP-Video-Streaming-Dont-Count-it-Out-100909.aspx</a></li>
  <li><a href="http://www.streamingmedia.com/">http://www.streamingmedia.com/</a></li>
  <li><a href="https://www.quora.com/Which-is-better-for-live-streaming-RTMP-vs-HLS-vs-WebRTC">https://www.quora.com/Which-is-better-for-live-streaming-RTMP-vs-HLS-vs-WebRTC</a></li>
  <li><a href="https://en.wikipedia.org/wiki/WebRTC">https://en.wikipedia.org/wiki/WebRTC</a></li>
  <li><a href="https://github.com/webrtc/samples">https://github.com/webrtc/samples</a></li>
  <li><a href="https://github.com/vapor-community">https://github.com/vapor-community</a></li>
  <li><a href="https://stackoverflow.com/questions/1991380/what-does-the-operator-do-in-java">https://stackoverflow.com/questions/1991380/what-does-the-operator-do-in-java</a></li>
  <li><a href="https://support.apple.com/en-ca/HT208309 -&gt; TIL: Apple uses React.js">https://support.apple.com/en-ca/HT208309 -&gt; TIL: Apple uses React.js</a></li>
  <li><a href="https://news.ycombinator.com/item?id=18137740">https://news.ycombinator.com/item?id=18137740</a></li>
  <li><a href="https://www.kalzumeus.com/2015/05/01/talking-about-money/#consulting-rates">https://www.kalzumeus.com/2015/05/01/talking-about-money/#consulting-rates</a></li>
  <li><a href="https://stackoverflow.com/questions/2884068/what-is-the-difference-between-a-map-and-a-dictionary">https://stackoverflow.com/questions/2884068/what-is-the-difference-between-a-map-and-a-dictionary</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Map_%28higher-order_function%29">https://en.wikipedia.org/wiki/Map_%28higher-order_function%29</a></li>
  <li><a href="https://www.canada.ca/en/public-service-commission/jobs/services/gc-jobs.html">https://www.canada.ca/en/public-service-commission/jobs/services/gc-jobs.html</a></li>
  <li><a href="https://www.enekoalonso.com/articles/creating-command-line-tools-with-swift-package-manager">https://www.enekoalonso.com/articles/creating-command-line-tools-with-swift-package-manager</a></li>
  <li><a href="https://www.enekoalonso.com/articles/parsing-command-line-arguments-with-swift-package-manager-argument-parser">https://www.enekoalonso.com/articles/parsing-command-line-arguments-with-swift-package-manager-argument-parser</a></li>
  <li><a href="https://www.enekoalonso.com/articles/handling-commands-with-swift-package-manager">https://www.enekoalonso.com/articles/handling-commands-with-swift-package-manager</a></li>
  <li><a href="https://www.swiftbysundell.com/posts/building-a-command-line-tool-using-the-swift-package-manager">https://www.swiftbysundell.com/posts/building-a-command-line-tool-using-the-swift-package-manager</a></li>
  <li><a href="https://stackoverflow.com/questions/31443645/simplest-way-to-throw-an-error-exception-with-a-custom-message-in-swift-2">https://stackoverflow.com/questions/31443645/simplest-way-to-throw-an-error-exception-with-a-custom-message-in-swift-2</a></li>
  <li><a href="https://stackoverflow.com/questions/24070450/how-to-get-the-current-time-as-datetime">https://stackoverflow.com/questions/24070450/how-to-get-the-current-time-as-datetime</a></li>
  <li><a href="http://goshdarnclosuresyntax.com/">http://goshdarnclosuresyntax.com/</a></li>
  <li><a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html">https://docs.swift.org/swift-book/LanguageGuide/Closures.html</a></li>
  <li><a href="https://learnappmaking.com/closures-swift-how-to/">https://learnappmaking.com/closures-swift-how-to/</a></li>
  <li><a href="https://developer.apple.com/documentation/swift/swift_standard_library">https://developer.apple.com/documentation/swift/swift_standard_library</a></li>
  <li><a href="https://stackoverflow.com/questions/43261580/how-can-i-convert-a-single-character-type-to-uppercase">https://stackoverflow.com/questions/43261580/how-can-i-convert-a-single-character-type-to-uppercase</a></li>
  <li><a href="https://stackoverflow.com/questions/28503449/swift-replace-substring-regex">https://stackoverflow.com/questions/28503449/swift-replace-substring-regex</a></li>
  <li><a href="https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#">https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html#</a></li>
  <li><a href="https://medium.com/@johnsundell/building-a-command-line-tool-using-the-swift-package-manager-3dd96ce360b1">https://medium.com/@johnsundell/building-a-command-line-tool-using-the-swift-package-manager-3dd96ce360b1</a></li>
  <li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</a></li>
  <li><a href="https://timingapp.com/changes#2018_3">https://timingapp.com/changes#2018_3</a></li>
  <li><a href="https://www.mediaatelier.com/GrandTotal5/?ref=timing">https://www.mediaatelier.com/GrandTotal5/?ref=timing</a></li>
  <li><a href="https://github.com/ltebean/Live">https://github.com/ltebean/Live</a></li>
  <li><a href="https://github.com/kishikawakatsumi/KeychainAccess">https://github.com/kishikawakatsumi/KeychainAccess</a></li>
  <li><a href="https://github.com/neoneye/SwiftyFORM">https://github.com/neoneye/SwiftyFORM</a></li>
  <li><a href="https://github.com/ortuman/SwiftForms">https://github.com/ortuman/SwiftForms</a></li>
  <li><a href="https://github.com/ra1028/Former">https://github.com/ra1028/Former</a></li>
  <li><a href="https://github.com/xmartlabs/Eureka">https://github.com/xmartlabs/Eureka</a></li>
  <li><a href="https://github.com/matteocrippa/awesome-swift#form">https://github.com/matteocrippa/awesome-swift#form</a></li>
  <li><a href="https://www.appcoda.com/vision-framework-introduction">https://www.appcoda.com/vision-framework-introduction</a></li>
  <li><a href="https://www.toronto.ca/business-economy/business-start-ups/success-stories-newsletter/small-business-month/">https://www.toronto.ca/business-economy/business-start-ups/success-stories-newsletter/small-business-month/</a></li>
  <li><a href="https://developer.apple.com/documentation/foundation/url_loading_system/downloading_files_in_the_background">https://developer.apple.com/documentation/foundation/url_loading_system/downloading_files_in_the_background</a></li>
  <li><a href="https://developer.apple.com/documentation/foundation/urlsessiondatatask">https://developer.apple.com/documentation/foundation/urlsessiondatatask</a></li>
</ul>

<p>I <strong>had</strong> all of these in tabs because each one weighted individually is just as important as the previous one ;-)</p>

<p>See you tomorrow.</p>

<p>PS: Just so we are totally transparent, it took me until <code class="highlighter-rouge">2018-10-05 01:45:36</code> … I’d explain why but</p>
:ET
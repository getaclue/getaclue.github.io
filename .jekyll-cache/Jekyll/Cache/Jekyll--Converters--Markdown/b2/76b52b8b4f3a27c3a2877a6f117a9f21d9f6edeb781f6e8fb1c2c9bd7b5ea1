I"<p>Have you ever wondered why you sometimes see <code class="highlighter-rouge">index</code> and sometimes <code class="highlighter-rouge">position</code> keywords in code fragments?</p>

<blockquote>
  <p>‚Ä¶ numeric indices are not a good choice for describing positions within a linked list because, knowing only an element‚Äôs index, the only way to reach it is to traverse the list incrementally from its beginning or end, counting elements along the way.</p>
</blockquote>

<blockquote>
  <p>‚Ä¶ position, which formalizes the intuitive notion of the ‚Äúlocation‚Äù of an element relative to others in the list.</p>
</blockquote>

<blockquote>
  <p>To provide a general abstraction for the location of an element within a structure, we define a simple position abstract data type.</p>
</blockquote>

<p>Be mindful that this is described within the context of Java.</p>

<p>This all stemmed from my reading of <code class="highlighter-rouge">The Positional List Abstract Data Type</code>. At the same time, this text was fun to read because it got linked to graphs and their traversals</p>

<blockquote>
  <p>The advantage of receiving a position as a return value is that we can subsequently use that position to traverse the list.</p>
</blockquote>

<p>and right away they give you a traversal example (the connection to graphs is obvious if you‚Äôve worked with them before)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Position</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="na">first</span><span class="o">();</span>
<span class="k">while</span> <span class="o">(</span><span class="n">cursor</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">cursor</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="na">after</span><span class="o">(</span><span class="n">cursor</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This position list has a bunch of update methods that work like this</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Method</th>
      <th style="text-align: center">Return value</th>
      <th style="text-align: center">Contents</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">addLast(5)</td>
      <td style="text-align: center">p</td>
      <td style="text-align: center">(5p)</td>
    </tr>
    <tr>
      <td style="text-align: center">addAfter(p, 7)</td>
      <td style="text-align: center">q</td>
      <td style="text-align: center">(5p, 7q)</td>
    </tr>
    <tr>
      <td style="text-align: center">addFirst(4)</td>
      <td style="text-align: center">r</td>
      <td style="text-align: center">(4r, 5p, 7q)</td>
    </tr>
    <tr>
      <td style="text-align: center">addBefore(r, 1)</td>
      <td style="text-align: center">s</td>
      <td style="text-align: center">(1s, 4r, 5p, 7q)</td>
    </tr>
    <tr>
      <td style="text-align: center">set(p, 0)</td>
      <td style="text-align: center">5</td>
      <td style="text-align: center">(1s, 4r, 0p, 7q)</td>
    </tr>
    <tr>
      <td style="text-align: center">remove(p)</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">(1s, 4r, 7q)</td>
    </tr>
  </tbody>
</table>

<p>See you next time</p>
:ET
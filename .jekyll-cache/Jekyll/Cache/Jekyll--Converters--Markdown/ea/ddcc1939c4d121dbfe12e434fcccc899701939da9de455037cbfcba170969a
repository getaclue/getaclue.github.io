I"û<p>I wanted to build an <a href="https://expressjs.com/en/starter/hello-world.html">ExpressJS</a> simple tool that will serve two functions :</p>

<ol>
  <li>hash a string using bcrypt and</li>
  <li>compare a hashed and plain-text string using <a href="https://www.npmjs.com/package/bcrypt">bcrypt</a> to see if they match.</li>
</ol>

<h2 id="justification">Justification</h2>

<p>These two features are the building blocks for something like authentication in an app. If I was storing some string in my database, like a password, that I did not want anyone to read, I would have to encrypt the string. Something like bcrypt algorithm is a wonderful tool to do that. In this tutorial, I walk you through the two functions that would save a lot of headaches for you : <code class="highlighter-rouge">hash</code> and <code class="highlighter-rouge">compare</code>. Lets see what I did in the steps below.</p>

<h2 id="limitations-of-bcrypt">Limitations of bcrypt</h2>

<p>The resulting hashes will be 60 characters in length and composed of the following characters :</p>

<blockquote>
  <p>./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$</p>
</blockquote>

<h2 id="create-a-new-project">Create a new project</h2>

<p>First, I created a new project running <code class="highlighter-rouge">npm init</code>.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>nodejsprojects
<span class="nb">mkdir </span>bcryptexample
<span class="nb">cd </span>bcryptexample
npm init
</code></pre></div></div>

<p>After that, I downloaded the two minimum dependencies :</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>express <span class="nt">--save</span>
npm <span class="nb">install </span>bcrypt <span class="nt">--save</span>
</code></pre></div></div>

<h2 id="implement-bcrypt-in-expressjs">Implement <a href="https://www.npmjs.com/package/bcrypt">bcrypt</a> in <a href="https://expressjs.com/en/starter/hello-world.html">expressjs</a></h2>

<p>Next, I created my express server with two public resources that process my two wanted functions for this project. The code of <code class="highlighter-rouge">index.js</code> simply looks like this :</p>

<script src="https://gist.github.com/getaclue/62142f5b829c4594a2f13bff7505f90d.js"></script>

<p>Finally, I launched my project</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node index.js
</code></pre></div></div>

<p>and began testing it by navigating to <code class="highlighter-rouge">http://localhost:3000/hash/randomstringgoeshere</code> to see the bcrypt hashed string as output by the server. To test the second function you need to input the hash and plain-text string manually. Like so :</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://localhost:3000/compare/<span class="nv">$2b$10$DB0melt1B</span>.3Fn7MfXwC17OIevWVhtSgXMrINkg9M4SEHdFgM6Myqm/dasdas
</code></pre></div></div>

<p>And thatâ€™s it. You now harness the power of using <a href="https://www.npmjs.com/package/bcrypt">bcrypt</a> in your <a href="https://expressjs.com/en/starter/hello-world.html">ExpressJS</a> projects. Feel free to read the documentations for <a href="https://www.npmjs.com/package/bcrypt">bcrypt</a> to see all of the options and customizations available out of the box. A prime example for using something like the bcrypt library is for password storage in your database.</p>

<p>In a scenario, after receiving user input of a password, run the text through <code class="highlighter-rouge">hash</code> function and then save that string in your database rather than a plain-text password. Next, when you need to check if the encrypted password saved in your database matches a string, run the <code class="highlighter-rouge">compare</code> function to check do that check for you.</p>

<hr />

<p>If you are adding authentication or message encrypting to your app, you are already doing some custom coding. So, spend a few moments and make that code secure so that your users have a peace of mind when it comes to storing something sensitive on your app. Just be aware of the limitations of this library.</p>

:ET
I"Ú<p>Question: Suppose you have an algorithm that you are running that has multiple steps. When you are approximating, when do you add the runtimes and when do you multiply them?</p>

<ul>
  <li>if <code class="highlighter-rouge">do this, then when you are done with this, do that</code>, then you add runtimes</li>
  <li>if <code class="highlighter-rouge">do this for each time you do that</code>, then you multiply runtimes</li>
</ul>

<h2 id="the-insertion-sort-algorithm">The Insertion-Sort Algorithm</h2>

<p>The goal of this algorithm is simple: take an array of elements and sort it in an increasing order. It does so by inserting one element at a time and by comparing elements during insertion.</p>

<blockquote>
  <p>Algorithm InsertionSort(A):</p>
</blockquote>

<blockquote>
  <p>Input: An array A of n comparable elements</p>
</blockquote>

<blockquote>
  <p>Output: The array A with elements rearranged in <strong>nondecreasing order</strong></p>
</blockquote>

<p>We basically walk one element at a time, from 0 to n:</p>

<blockquote>
  <p>for k from 1 to n do</p>
</blockquote>

<blockquote>
  <p>Insert element A[k] at its proper location in the array at position A[0], A[1], A[2], â€¦, A[k]</p>
</blockquote>

<p>or as you would like to call it â€” increasing order.</p>

<p>Question: When will this algorithm behave the best?</p>

<p>Answer: When the elements in the array are sorted in order.</p>

<p>Question: When will this algorithm have the worst of times?</p>

<p>Answer: When the elements in the array are placed in the reversed order (from high to low - a decreasing order). Our little guy will have to swap every element and move it to the other side.</p>

<p>Guided with the following from <a href="https://www.amazon.ca/Data-Structures-Algorithms-Michael-Goodrich/dp/1118771338/">textbook</a></p>

<blockquote>
  <p>using an <strong>outer loop</strong> to consider each element in turn,
and an <strong>inner loop</strong> that moves a newly considered element to its proper location relative to the (sorted) subarray of elements that are to its left</p>
</blockquote>

<p>I went on to do my own implementation â€” because why not and I could use some review.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">char</span><span class="o">[]</span> <span class="nf">insertionSort</span><span class="o">(</span><span class="kt">char</span><span class="o">[]</span> <span class="n">input</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">input</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="cm">/*
        Assumption: position 0 is sorted by definition

        Start with position 1
            Grab the value at the position
                Question: is the value at previous position 0 (n-1) bigger than current value
                    if yes
                        do a loop
                            place previous value that is bigger in the current place
                    if no
                        do no loop

               Place the current value in the position based on the answer to the question
         */</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">input</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">current</span> <span class="o">=</span> <span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">insertPosition</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>

            <span class="cm">/*
                We are walking from the current position to the front of the array at position 0
             */</span>

            <span class="k">for</span> <span class="o">(;</span> <span class="n">insertPosition</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="n">insertPosition</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">current</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">input</span><span class="o">[</span><span class="n">insertPosition</span><span class="o">]</span> <span class="o">=</span> <span class="n">input</span><span class="o">[</span><span class="n">insertPosition</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
                    <span class="n">insertPosition</span><span class="o">--;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="n">input</span><span class="o">[</span><span class="n">insertPosition</span><span class="o">]</span> <span class="o">=</span> <span class="n">current</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">input</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>See you tomorrow.</p>

:ET
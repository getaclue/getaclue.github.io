I"=.<p>Today, I did a few quick fixes to the current layout of this website.</p>

<ul>
  <li>
    <p>I added <code class="highlighter-rouge">« Previous Essay</code> and <code class="highlighter-rouge">Next Essay »</code> links to each piece of writing at the end for easier navigation</p>

    <p>This required a slight modification to the templates. Found the following article <a href="https://david.elbe.me/jekyll/2015/06/20/how-to-link-to-next-and-previous-post-with-jekyll.html">Jekyll – how to link to next/previous post on your blog</a> very useful in this venture. In fact, it is very simple. Like so:</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
  <span class="nc">.not-post-page-navigation</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">flex</span><span class="p">;</span>
    <span class="nl">justify-content</span><span class="p">:</span> <span class="n">space-around</span><span class="p">;</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">1em</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"not-post-page-navigation"</span><span class="nt">&gt;</span>
  {% if page.previous.url %}
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{page.previous.url}}"</span> <span class="na">title=</span><span class="s">"{{page.previous.title}}"</span><span class="nt">&gt;</span><span class="ni">&amp;laquo;</span>
    Previous Essay<span class="nt">&lt;/a&gt;</span>
  {% endif %}
  {% if page.next.url %}
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"{{page.next.url}}"</span> <span class="na">title=</span><span class="s">"{{page.next.title}}"</span><span class="nt">&gt;</span>Next Essay <span class="ni">&amp;raquo;</span><span class="nt">&lt;/a&gt;</span>
  {% endif %}
<span class="nt">&lt;/div&gt;</span>
</code></pre></div>    </div>

    <p>I also had to look up how I could show you the code above because it had some inline liquid syntactic sugar. So the parser simply interpreted the code about as any regular code. You need to add <code class="highlighter-rouge">raw</code> and <code class="highlighter-rouge">endraw</code> tags before the code and proceed as before! See <a href="https://github.com/github/linguist/issues/3690">Liquid syntax highlighting in Markdown</a></p>
  </li>
  <li>
    <p>I also re-wrote the little script that I wrote in Swift a few days ago in Java. I’m basically jumping between languages because why not. Had some hiccups with looking up regular expressions syntax in Java. Here is the current working copy:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Please do like this: LazyTitleMaker &lt;title&gt;"</span><span class="o">);</span>
          <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
      <span class="o">}</span>

      <span class="nc">DateFormat</span> <span class="n">dateStyleFormat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SimpleDateFormat</span><span class="o">(</span><span class="s">"yyyy-MM-dd"</span><span class="o">);</span>
      <span class="nc">Date</span> <span class="n">currDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="o">();</span>
      <span class="nc">String</span> <span class="n">currDateText</span> <span class="o">=</span> <span class="n">dateStyleFormat</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">currDate</span><span class="o">);</span>

      <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">toLowerCase</span><span class="o">();</span>
      <span class="nc">String</span> <span class="n">inputWSReplaced</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"\\s+"</span><span class="o">,</span> <span class="s">"-"</span><span class="o">);</span>
      <span class="nc">String</span> <span class="n">sanitizedString</span> <span class="o">=</span> <span class="n">inputWSReplaced</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"[\\',?]"</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>

      <span class="nc">String</span> <span class="n">resultantURI</span> <span class="o">=</span> <span class="n">currDateText</span> <span class="o">+</span> <span class="s">"-"</span> <span class="o">+</span> <span class="n">sanitizedString</span><span class="o">;</span>

      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">resultantURI</span> <span class="o">+</span> <span class="s">".markdown"</span><span class="o">);</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Length: "</span> <span class="o">+</span> <span class="n">resultantURI</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <p>Need to fix the following code that you see above at some later time</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="nc">String</span> <span class="n">sanitizedString</span> <span class="o">=</span> <span class="n">inputWSReplaced</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"[\\',?]"</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
</code></pre></div>    </div>

    <p>I wanted to find all characters in the string that are not words and not spaces. I expected <code class="highlighter-rouge">[^w]</code> to match to all characters that are not words and <code class="highlighter-rouge">[^s]</code> to match all characters that are not spaces.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="nc">String</span> <span class="n">sanitizedString</span> <span class="o">=</span> <span class="n">inputWSReplaced</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">"[^\\w\\s]"</span><span class="o">,</span> <span class="s">""</span><span class="o">);</span>
</code></pre></div>    </div>

    <p>Similar to how I would do it in JavaScript</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="dl">"</span><span class="s2">Some Str,in'g?</span><span class="dl">"</span>
  <span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[^\w\s]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">''</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>I also changed the about page and the projects page</li>
  <li>
    <p>I added a new template for the about and projects pages</p>

    <p>Modified the way images are displayed in the liquid templates. Replaced <code class="highlighter-rouge">{:width="60%"}</code> with <code class="highlighter-rouge">{:style="max-width:100%"}</code>.</p>
  </li>
  <li>I removed the newsletter link at the footer</li>
  <li>I adjusted my project involvement for Screenhole and Keyframes. Until further notice my involvement is on pause while <a href="https://thinko.com">Thinko</a> focuses on other things. I enjoyed working with the team and hope to do so again the future. Jacob and Pasquale are wonderful.</li>
  <li>Played with modulo and reminder theories decoding a birthday message <a href="https://stackoverflow.com/a/37240042">1</a>, <a href="https://stackoverflow.com/a/3354251">2</a>.</li>
</ul>

<p>It is fun to make things for no reason other than just because. So, what do I think about: <em>If you don’t share your project, did you actually make it?</em> While I think it depends on the project and the goals, I think that decision is ultimately up to you. It is very easy to fall in the trap of sharing for the sake of sharing. For me — I first look at the project and then I look at the goals. Most likely than not the things that I share I hope others to find useful and educational.</p>

<p>Links for today:</p>

<ul>
  <li><a href="http://files.zeroturnaround.com/pdf/zt_regular-expressions-cheat-sheet.pdf">http://files.zeroturnaround.com/pdf/zt_regular-expressions-cheat-sheet.pdf</a></li>
  <li><a href="https://regexr.com/">https://regexr.com/</a></li>
  <li><a href="https://stackoverflow.com/questions/10253516/ruby-regex-replace-non-word-chars-that-are-not-space-chars">https://stackoverflow.com/questions/10253516/ruby-regex-replace-non-word-chars-that-are-not-space-chars</a></li>
  <li><a href="http://tutorials.jenkov.com/java-internationalization/simpledateformat.html">http://tutorials.jenkov.com/java-internationalization/simpledateformat.html</a></li>
  <li><a href="http://www.vogella.com/tutorials/JavaRegularExpressions/article.html">http://www.vogella.com/tutorials/JavaRegularExpressions/article.html</a></li>
  <li><a href="http://www.java2s.com/Tutorials/Java/java.time/LocalDateTime/2720__LocalDateTime.now_.htm">http://www.java2s.com/Tutorials/Java/java.time/LocalDateTime/2720_<em>LocalDateTime.now</em>.htm</a></li>
  <li><a href="https://docs.oracle.com/javase/tutorial/java/data/manipstrings.html">https://docs.oracle.com/javase/tutorial/java/data/manipstrings.html</a></li>
  <li><a href="https://help.shopify.com/en/themes/liquid/filters/string-filters">https://help.shopify.com/en/themes/liquid/filters/string-filters</a></li>
  <li><a href="https://devhints.io/jekyll">https://devhints.io/jekyll</a></li>
  <li><a href="https://gist.github.com/mikeygee/2626538">https://gist.github.com/mikeygee/2626538</a></li>
  <li><a href="https://gist.github.com/JJediny/a466eed62cee30ad45e2">https://gist.github.com/JJediny/a466eed62cee30ad45e2</a></li>
</ul>

:ET